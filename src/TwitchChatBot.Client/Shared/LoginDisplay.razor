@using Microsoft.Identity.Web
@using Microsoft.Extensions.Options
@using System.Security.Claims
@inject IOptionsMonitor<MicrosoftIdentityOptions> microsoftIdentityOptions
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>
        @if (canEditProfile)
        {
            <a href="MicrosoftIdentity/Account/EditProfile">Hello@(String.IsNullOrEmpty(_userName) ? "" : $", {_userName}!")</a>
        }
        else
        {
            <text>Hello@(String.IsNullOrEmpty(_userName) ? "" : $", {_userName}!")</text>
        }
        <a href="MicrosoftIdentity/Account/SignOut">Log out</a>
    </Authorized>
    <NotAuthorized>
        <a href="MicrosoftIdentity/Account/SignIn">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool canEditProfile;
    private string _userName;

    protected override async Task OnInitializedAsync()
    {
        var options = microsoftIdentityOptions.CurrentValue;
        canEditProfile = !string.IsNullOrEmpty(options.EditProfilePolicyId);

        // TODO: Refactor how the user name is pulled from the Google claims returned during login
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _userName = user.Claims.FirstOrDefault(claim => claim.Type == ClaimTypes.GivenName).Value;
        }
    }
}